
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*; // import JDBC package
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;
import java.util.Scanner;

public class MedicineQuery {
	public static final String URL = "jdbc:oracle:thin:@localhost:1521:orcl";
	public static final String USER_UNIVERSITY ="medicine";
	public static final String USER_PASSWD ="comp322";

	// 약국이름으로 약국의 위치 검색
	public static void pharmacy_location(Connection conn, Statement stmt) {
		System.out.println("\n-------------------------------");
		System.out.println("-------- [ 약국 위치 검색 ] --------");
		System.out.print("약국이름: ");
		
		String pharmacy_name = "";

		Scanner sc = new Scanner(System.in);
		pharmacy_name = sc.nextLine();
		
		ResultSet rs = null;
		try {
			stmt = conn.createStatement();
			// Q1: Complete your query.
			String sql = "SELECT Name, Address"
					+ " FROM PHARMACY"
					+ " WHERE Name LIKE '%"+pharmacy_name+"%'"
					+ " ORDER BY NAME";
			rs = stmt.executeQuery(sql);
			System.out.println("\n<< 약국 검색 결과 >>");
			System.out.println("약국이름 | 주소");
			System.out.println("-------------------------------");
			int cnt = 0;
			while(rs.next()) {
				// Fill out your code	
				String p_name = rs.getString(1);
				String p_address = rs.getString(2);
				System.out.println(p_name +" | " + p_address);
				cnt++;
			}
			if (cnt == 0) {
				System.out.println(pharmacy_name+" (으)로 조회된 약국이 없습니다.");
			}
			System.out.println("\n");
			stmt.close(); 
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 이름, 전화번호, 생일 검색해서 전화번호, 주소 update
	public static void update_client_info(Connection conn, Statement stmt, String clientID) {
		System.out.println("\n-----------------------------------------");
		System.out.println("-------- [ "+clientID+" 님의 개인정보 ] --------");
		
		ResultSet rs = null;
		try {
			stmt = conn.createStatement();
			// Q1: Complete your query.
			String sql = "SELECT Name, Sex, Birthday, C_address, Phone_num"
					+ " FROM CLIENT"
					+ " WHERE ID = "+clientID;
			rs = stmt.executeQuery(sql);
			
			rs.next();
			String c_name = rs.getString(1);
			String c_sex = rs.getString(2);
			SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy년 MM월 dd일");
			Date Birthday = rs.getDate(3);
			String c_birthday = sdfDate.format(Birthday);
			String c_address = rs.getString(4);
			String c_phone_num = rs.getString(5);
			System.out.println("이름: "+c_name);
			if (c_sex.equals("M"))
				System.out.println("성별: 남");
			else
				System.out.println("성별: 여");
			System.out.println("생일: "+c_birthday);
			System.out.println("주소: "+c_address);
			System.out.println("전화번호: "+c_phone_num);
			System.out.println("\n");
			
			
			System.out.println("* 편집하시겠습니까? [y/n]");
			Scanner sc = new Scanner(System.in);
			String u = sc.nextLine();
			if (u.equals("y") || u.equals("Y")) {
				System.out.println("* 수정하고자 하는 항목을 입력해주세요.");
				System.out.print("주소: ");
				String address = sc.nextLine();
				System.out.print("전화번호: ");
				String phone_num = sc.nextLine();
				if (phone_num.length() != 11) {
					System.out.println("* 잘못된 전화번호 입력입니다.");
				}
				else {
					sql = "UPDATE CLIENT"
							+ " SET C_address = '"+address+"', Phone_num = '"+phone_num+"' "
									+ "WHERE ID = '"+clientID+"'";
					rs = stmt.executeQuery(sql);
					
					System.out.println("* 수정되었습니다.");
					
				}
				
			}
			else if (u.equals("N") || u.equals("n")) {
				System.out.println("* 개인정보 수정을 취소합니다.");
			}
			else {
				System.out.println("* 잘못된 입력입니다.");
			}
			
			stmt.close(); 
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// 어떤 약을 선택하면 그 약을 구매했던 주문기록 조회
	public static void show_medicine_history(Connection conn, Statement stmt) {
		System.out.println("\n----------------------------------");
		System.out.println("-------- [ 약 주문 기록 조회 ] --------");
		System.out.println("1. 약 이름으로 조회");
		System.out.println("2. 약 번호로 조회");
		ResultSet rs = null;
		
		System.out.print("* 번호 입력: ");
		Scanner sc = new Scanner(System.in);
		int i = sc.nextInt();
		sc.nextLine();
		
		switch (i) {
			case 1: 
				System.out.print("* 약 이름: ");
				String m_name = sc.nextLine();
				try {
					stmt = conn.createStatement();
					String sql = "SELECT O.Client_ID, M.Name, O.Order_date, C.Count, O.Prescription"
							+ " FROM CONTAIN C JOIN MEDICINE M ON C.M_number = M.M_number, M_ORDER O"
							+ " WHERE C.Order_num = O.Order_num"
							+ " AND C.Chemist_ID = O.Chemist_ID"
							+ " AND C.Client_ID = O.Client_ID"
							+ " AND M.Name LIKE '%"+m_name+"%'"
							+ " ORDER BY O.Order_date";
					
					rs = stmt.executeQuery(sql);
					System.out.println("\n<< 약 주문기록 검색결과 >>");
					System.out.println("고객 ID | 약 이름 | 주문 날짜 | 수량 | 처방전 유무");
					System.out.println("-----------------------------------------");
					int cnt = 0;
					while(rs.next()) {
						// Fill out your code	
						String c_id = rs.getString(1);
						String mname = rs.getString(2);
						SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd");
						Date o_date = rs.getDate(3);
						String order_day = sdfDate.format(o_date);
						String m_count = rs.getString(4);
						int prescript = rs.getInt(5);
						if (prescript == 1) {
							System.out.println(c_id+" | "+mname+" | "+order_day+" | "+m_count+" | "+"O" );
						}
						else {
							System.out.println(c_id+" | "+mname+" | "+order_day+" | "+m_count+" | "+"X" );
						}
						cnt++;
					}
					if (cnt == 0) {
						System.out.println(m_name+" (으)로 조회된 주문기록이 없습니다.");
					}
					System.out.println("\n");
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case 2:
				System.out.print("* 약 번호: ");
				String m_num = sc.nextLine();
				try {
					stmt = conn.createStatement();
					String sql = "SELECT O.Client_ID, M.Name, O.Order_date, C.Count, O.Prescription"
							+ " FROM CONTAIN C JOIN MEDICINE M ON C.M_number = M.M_number, M_ORDER O"
							+ " WHERE C.Order_num = O.Order_num"
							+ " AND C.Chemist_ID = O.Chemist_ID"
							+ " AND C.Client_ID = O.Client_ID"
							+ " AND M.M_number = "+m_num+""
							+ " ORDER BY O.Order_date";
					
					rs = stmt.executeQuery(sql);
					System.out.println("\n<< 약 주문기록 검색결과 >>");
					System.out.println("고객 ID | 약 이름 | 주문 날짜 | 수량 | 처방전 유무");
					System.out.println("-----------------------------------------");
					int cnt = 0;
					while(rs.next()) {
						// Fill out your code	
						String c_id = rs.getString(1);
						String mname = rs.getString(2);
						SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd");
						Date o_date = rs.getDate(3);
						String order_day = sdfDate.format(o_date);
						String m_count = rs.getString(4);
						int prescript = rs.getInt(5);
						if (prescript == 1) {
							System.out.println(c_id+" | "+mname+" | "+order_day+" | "+m_count+" | "+"O" );
						}
						else {
							System.out.println(c_id+" | "+mname+" | "+order_day+" | "+m_count+" | "+"X" );
						}
						cnt++;
					}
					if (cnt == 0) {
						System.out.println("약 번호 "+m_num+" (으)로 조회된 주문기록이 없습니다.");
					}
					System.out.println("\n");
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			default:
				System.out.println("* 잘못된 입력입니다.");
				break;
		}
		
		
		
	}
	
	// 약 주문
	public static void medicine_order(Connection conn, Statement stmt, String clientID) {
		System.out.println("\n----------------------------------");
		System.out.println("-------- [ 약 주문 및 주문취소 ] --------");
		System.out.println("1. 약 번호 찾기");
		System.out.println("2. 약 주문 기록 조회");
		System.out.println("3. 약 주문");
		System.out.println("4. 약 주문 취소");
		ResultSet rs = null;
		
		System.out.print("* 번호 입력: ");
		Scanner sc = new Scanner(System.in);
		int i = sc.nextInt();
		sc.nextLine();
		
		switch (i) {
			case 1: // 새로운 주문이 생기는 경우
				// 주문하고자 하는 약 번호 조회
				System.out.print("\n* 약 이름 입력: ");
				String m_name = sc.nextLine();
				try {
					stmt = conn.createStatement();
					String sql = "SELECT M_number, NAME"
							+ " FROM MEDICINE"
							+ " WHERE Name LIKE '%"+m_name+"%'"
							+ " ORDER BY M_number";
					
					rs = stmt.executeQuery(sql);
					System.out.println("\n<< 약 검색결과 >>");
					System.out.println("약 번호 | 약 이름 ");
					System.out.println("----------------");
					int cnt = 0;
					while(rs.next()) {
						// Fill out your code	
						String m_num = rs.getString(1);
						String mname = rs.getString(2);
						System.out.println(m_num+" | "+mname);
						cnt++;
					}
					if (cnt == 0) {
						System.out.println("약 이름 "+m_name+" (으)로 조회된 결과가 없습니다.");
					}
					System.out.println("\n");
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				break;
			case 2:
				// 약 주문기록 조회
				System.out.print("\n* 주문 번호: ");
				String o_num3 = sc.nextLine();
				System.out.print("* 약사 ID: ");
				String chemistID3 = sc.nextLine();

				try {
					stmt = conn.createStatement();
					
					String sql = "SELECT Order_num, M_number, Count, Order_date, Prescription, Chemist_ID"
							+ " FROM M_ORDER NATURAL JOIN CONTAIN "
									+ " WHERE Order_num = "+o_num3
									+ " AND Chemist_ID = "+chemistID3;
					
					rs = stmt.executeQuery(sql);
					System.out.println("\n<< 주문기록 검색결과 >>");
					System.out.println("주문 번호 | 약 번호 | 수량 | 주문 날짜 | 처방전 유무 | 약사ID ");
					System.out.println("-----------------------------------------------------");
					int cnt = 0;
					while(rs.next()) {
						// Fill out your code	
						String order_num = rs.getString(1);
						String m_num = rs.getString(2);
						String o_count = rs.getString(3);
						SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd");
						Date o_date = rs.getDate(4);
						String order_day = sdfDate.format(o_date);
						int prescript = rs.getInt(5);
						String chemist_ID = rs.getString(6);
						if (prescript == 1) {
							System.out.println(order_num+" | "+m_num+" | "+o_count+" | "+order_day+" | "+"O | "+chemist_ID );
						}
						else {
							System.out.println(order_num+" | "+m_num+" | "+o_count+" | "+order_day+" | "+"X | "+chemist_ID );
						}
						cnt++;
					}
					if (cnt == 0) {
						System.out.println("* 해당 조건의 주문 기록이 없습니다.");
					}
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					System.out.println("* 해당 조건의 주문 기록이 없습니다.");
					e.printStackTrace();
				}
				break;
			case 3:
				// 약 주문하기
				String o_prescription = "";
				System.out.print("\n* 약 번호: ");
				String m_num = sc.nextLine();
				System.out.print("* 수량: ");
				String m_count = sc.nextLine();
				System.out.print("* 주문 날짜 (yyyy-mm-dd): ");
				String o_date = sc.nextLine();
				System.out.print("* 처방전 유무(o/x): ");
				String p = sc.nextLine();
				if (p.equals("o") || p.equals("O"))
					o_prescription = "1";
				else if (p.equals("x") || p.equals("X"))
					o_prescription = "0";
				else {
					System.out.println("* 잘못된 입력입니다.");
					break;
				}
				System.out.print("* 주문받은 약사 ID: ");
				String chemistID = sc.nextLine();
				
				System.out.print("* 주문 번호: ");
				String o_num = sc.nextLine();
				
				try {
					stmt = conn.createStatement();
					
					String sql = "INSERT INTO M_ORDER VALUES ("
							+ o_num + ", TO_DATE('" + o_date
									+ "', 'yyyy-mm-dd'), "+o_prescription
									+ ", "+chemistID+", "+clientID+")";
					
					rs = stmt.executeQuery(sql);
					
					sql = "INSERT INTO CONTAIN VALUES ("
							+ m_num + ", " + o_num
									+ ", " + m_count
									+ ", "+chemistID+", '"+clientID+"')";
					rs = stmt.executeQuery(sql);
					
					
					System.out.println("\n* 주문이 확인되었습니다.");
					System.out.println("\n");
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					System.out.println("* 잘못된 주문입니다.");
					e.printStackTrace();
				}
				break;
			case 4:
				// 약 주문취소
				System.out.print("\n* 주문 번호: ");
				String o_num2 = sc.nextLine();
				System.out.print("* 약사 ID: ");
				String chemistID2 = sc.nextLine();

				try {
					stmt = conn.createStatement();
					
					String sql = "DELETE FROM M_ORDER"
							+ " WHERE Order_num = "+o_num2
									+ " AND Client_ID = '"+clientID+"'"
									+ " AND Chemist_ID = "+chemistID2;
					
					rs = stmt.executeQuery(sql);
					
					System.out.println("\n* 주문이 취소되었습니다.");
					System.out.println("\n");
					stmt.close(); 
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					System.out.println("* 해당 조건의 주문 기록이 없습니다.");
					e.printStackTrace();
				}
				break;
			default:
				System.out.println("* 잘못된 입력입니다.");
				break;
		}
		
	}
	
	public static void main(String[] args) {
		Connection conn = null; // Connection object
		Statement stmt = null;	// Statement object
		
		System.out.print("Driver Loading: ");
		try {
			// Load a JDBC driver for Oracle DBMS
			Class.forName("oracle.jdbc.driver.OracleDriver");
			// Get a Connection object 
			System.out.println("Success!");
		}catch(ClassNotFoundException e) {
			System.err.println("error = " + e.getMessage());
			System.exit(1);
		}

		// Make a connection
		try{
			conn = DriverManager.getConnection(URL, USER_UNIVERSITY, USER_PASSWD); 
			System.out.println("Oracle Connected.\n");
		}catch(SQLException ex) {
			ex.printStackTrace();
			System.err.println("Cannot get a connection: " + ex.getLocalizedMessage());
			System.err.println("Cannot get a connection: " + ex.getMessage());
			System.exit(1);
		}
		
		// login
		System.out.println("-------------------------------------");
		System.out.println("1. 고객 로그인");
		System.out.println("2. 약사 로그인");
		System.out.print("* 번호 입력: ");
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		sc.nextLine();
		ResultSet rs = null;
		switch (n) {
		case 1:
			System.out.print("client ID: ");
			String clientID = sc.nextLine();
			
			// 존재하는 client ID인지 확인
			
			try {
				stmt = conn.createStatement();
				// Q1: Complete your query.
				String sql = "SELECT ID"
						+ " FROM CLIENT"
						+ " WHERE ID = '"+clientID+"'";
				rs = stmt.executeQuery(sql);

				int cnt = 0;
				while(rs.next()) {
					// Fill out your code	
					rs.getString(1);
					cnt++;
				}
				if (cnt == 0) {
					System.out.println("* 존재하지 않는 clientID 입니다. 입력값: "+clientID);
					System.out.println("* 프로그램을 종료합니다.");
					System.exit(1);
				}
				else {
					System.out.println("* 로그인 성공");
				}
				System.out.println("\n");
				stmt.close(); 
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			while(true) {
				System.out.println("-----------------------------------");
				System.out.println("1. 약 검색");
				System.out.println("2. 약국 이름 검색");
				System.out.println("3. 약국 위치 검색");
				System.out.println("4. 이전 주문기록 조회");
				System.out.println("5. 주문 추가 및 삭제");
				System.out.println("6. 병력기록 추가");
				System.out.println("7. 개인정보 수정");
				System.out.println("0. 종료\n");
				
				System.out.print("* 번호 입력: ");
				int i = sc.nextInt();
				sc.nextLine();
				System.out.println("");
				switch (i) {
				case 0:
					System.out.println("* 프로그램을 종료합니다.");
					System.exit(0);
					break;
				case 1:
					System.out.println("1");
					break;
				case 2:
					System.out.println("2");
					break;
				case 3:
					System.out.println("3");
					break;
				case 4:
					System.out.println("4");
					break;
				case 5:
					medicine_order(conn, stmt, clientID);
					break;
				case 6:
					System.out.println("6");
					break;
				case 7:
					System.out.println("7");
					break;
				default:
					System.out.println("잘못된 입력입니다.");
				}
			}
			
		case 2:
			System.out.print("chemist ID: ");
			String chemistID = sc.nextLine();
			
			// 존재하는 client ID인지 확인
			try {
				stmt = conn.createStatement();
				// Q1: Complete your query.
				String sql = "SELECT ID"
						+ " FROM CHEMIST"
						+ " WHERE ID = '"+chemistID+"'";
				rs = stmt.executeQuery(sql);

				int cnt = 0;
				while(rs.next()) {
					// Fill out your code	
					rs.getString(1);
					cnt++;
				}
				if (cnt == 0) {
					System.out.println("* 존재하지 않는 chemistID 입니다. 입력값: "+chemistID);
					System.out.println("* 프로그램을 종료합니다.");
					System.exit(1);
				}
				else {
					System.out.println("* 로그인 성공");
				}
				System.out.println("\n");
				stmt.close(); 
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			while(true) {
				System.out.println("-----------------------------------");
				System.out.println("1. 고객 조회");
				System.out.println("2. 약 주문 기록 조회");
				System.out.println("3. 약 재고 조회");
				System.out.println("0. 종료\n");
				
				System.out.print("* 번호 입력: ");
				int i = sc.nextInt();
				sc.nextLine();
				System.out.println("");
				switch (i) {
				case 0:
					System.out.println("* 프로그램을 종료합니다.");
					System.exit(0);
					break;
				case 1:
					System.out.println("1");
					break;
				case 2:
					System.out.println("2");
					break;
				case 3:
					System.out.println("3");
					break;
				default:
					System.out.println("잘못된 입력입니다.");
				}
			}
		default:
			System.out.println("* 잘못된 입력입니다.");
			System.out.println("* 프로그램을 종료합니다.");
			System.exit(1);
		}
		
		// my function
		
		//pharmacy_location(conn, stmt);
		//update_client_info(conn, stmt, "111223333");
		//show_medicine_history(conn, stmt);
	}
	
	
	
}
